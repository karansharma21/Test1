from collections import defaultdict
graph=defaultdict(list)
def addEdge(graph,u,v):
    graph[u].append(v)
    #for undirected graph
    #graph[v].append(u)
    
def generate_Edges(graph):
    edges=[]
    for node in graph:
        for neighbour in graph[node]:
            edges.append((node,neighbour))
    return edges

addEdge(graph,0,2)
addEdge(graph,2,1)
addEdge(graph,1,3)
addEdge(graph,0,3)
print(generate_Edges(graph))



# function to find path 
def find_path(graph, start, end, path =[]): 
  path = path + [start] 
  if start == end: 
    return path 
  for node in graph[start]: 
    if node not in path: 
      newpath = find_path(graph, node, end, path) 
      if newpath:  
        return newpath 
      return None
     
     
print(find_path(graph,0,3))



# function to generate all possible paths 
def find_all_paths(graph, start, end, path =[]): 
  path = path + [start] 
  if start == end: 
    return [path] 
  paths = [] 
  for node in graph[start]: 
    if node not in path: 
      newpaths = find_all_paths(graph, node, end, path) 
    for newpath in newpaths: 
      paths.append(newpath) 
  return paths 
    
# Driver function call to print all  
# generated paths 
print(find_all_paths(graph,0,3)) 




# function to find the shortest path 
def find_shortest_path(graph, start, end, path =[]): 
        path = path + [start] 
        if start == end: 
            return path 
        shortest = None
        for node in graph[start]: 
            if node not in path: 
                newpath = find_shortest_path(graph, node, end, path) 
                if newpath: 
                    if not shortest or len(newpath) < len(shortest): 
                        shortest = newpath 
        return shortest 
          
# Driver function call to print 
# the shortest path 
print(find_shortest_path(graph, 0, 3))
